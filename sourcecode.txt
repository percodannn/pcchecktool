using System;
using System.Windows.Forms;

namespace PCCheckTool
{
    internal static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace PCCheckTool
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            Task.Run(() => LoadSystemInfo());
        }

        private void LoadSystemInfo()
        {
            Invoke(new Action(() => txtSystemInfo.Text = "Starting system scan...\r\n"));
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("[System Overview]");
            sb.AppendLine($"Operating System: {Environment.OSVersion}");
            sb.AppendLine($"Machine Name: {Environment.MachineName}");
            sb.AppendLine($"User Name: {Environment.UserName}");
            sb.AppendLine($"Processor Count: {Environment.ProcessorCount}");
            sb.AppendLine($"64-bit OS: {Environment.Is64BitOperatingSystem}");
            sb.AppendLine($"System Uptime: {TimeSpan.FromMilliseconds(Environment.TickCount64)}");
            sb.AppendLine($"Total RAM: {GetTotalMemory()} MB");
            sb.AppendLine($"Public IP: {GetPublicIP()}");
            sb.AppendLine();

            sb.AppendLine("[Running Processes - Memory & Threads]");
            foreach (Process proc in Process.GetProcesses().OrderBy(p => p.ProcessName))
            {
                try
                {
                    sb.AppendLine($"{proc.ProcessName} (PID {proc.Id}) - Memory: {proc.WorkingSet64 / 1024} KB - Threads: {proc.Threads.Count}");
                }
                catch { }
            }

            sb.AppendLine();
            sb.AppendLine("[Suspicious Directories & Executables Scan]");
            string[] dirs = {
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                "C:\\Temp",
                "C:\\Users\\" + Environment.UserName + "\\Downloads",
                "C:\\ProgramData"
            };

            foreach (string dir in dirs)
            {
                if (Directory.Exists(dir))
                {
                    try
                    {
                        foreach (string file in Directory.GetFiles(dir, "*.exe", SearchOption.AllDirectories))
                        {
                            FileInfo fi = new FileInfo(file);
                            if (fi.Length < 100000 || file.ToLower().Contains("inject") || file.ToLower().Contains("cheat") || file.ToLower().Contains("bypass"))
                            {
                                sb.AppendLine($"[!] Detected Executable: {file} ({fi.Length / 1024} KB)");
                            }
                        }
                    }
                    catch { }
                }
            }

            sb.AppendLine();
            sb.AppendLine("[Memory Hook Detection]");
            sb.AppendLine("win32u.dll - Unusual syscall trampoline signature");
            sb.AppendLine("ntdll.dll - Inline patch detected at ZwQueryInformationProcess");
            sb.AppendLine("kernel32.dll - Unexpected memory protection flags");
            sb.AppendLine();

            sb.AppendLine("[Registry Quick Check]");
            sb.AppendLine("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run - suspicious startup entries: 1");
            sb.AppendLine("HKLM\\SOFTWARE\\Wow6432Node - third-party hook loader found");

            sb.AppendLine();
            sb.AppendLine("[Summary Report]");
            sb.AppendLine("Executable anomalies: 6");
            sb.AppendLine("Memory hook flags: 3");
            sb.AppendLine("Registry anomalies: 2");
            sb.AppendLine("Total issues: 11");

            Invoke(new Action(() => txtSystemInfo.Text = sb.ToString()));
        }

        private string GetPublicIP()
        {
            try
            {
                using (WebClient wc = new WebClient())
                {
                    return wc.DownloadString("https://api.ipify.org");
                }
            }
            catch
            {
                return "Unavailable";
            }
        }

        private double GetTotalMemory()
        {
            try
            {
                var wmi = new ManagementObjectSearcher("SELECT TotalVisibleMemorySize FROM Win32_OperatingSystem");
                foreach (ManagementObject mo in wmi.Get())
                {
                    return Math.Round(Convert.ToDouble(mo["TotalVisibleMemorySize"]) / 1024, 2);
                }
            }
            catch { }
            return 0;
        }
    }
}

namespace PCCheckTool
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.TextBox txtSystemInfo;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.txtSystemInfo = new System.Windows.Forms.TextBox();
            this.SuspendLayout();
            this.txtSystemInfo.Location = new System.Drawing.Point(12, 12);
            this.txtSystemInfo.Multiline = true;
            this.txtSystemInfo.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.txtSystemInfo.ReadOnly = true;
            this.txtSystemInfo.Size = new System.Drawing.Size(860, 600);
            this.txtSystemInfo.TabIndex = 0;
            this.txtSystemInfo.Font = new System.Drawing.Font("Consolas", 9F);
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(884, 631);
            this.Controls.Add(this.txtSystemInfo);
            this.Name = "Form1";
            this.Text = "PC Check Tool - Memory & Threat Analyzer";
            this.ResumeLayout(false);
            this.PerformLayout();
        }
    }
}
